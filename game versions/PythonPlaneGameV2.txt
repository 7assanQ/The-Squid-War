from ursina import *

def update():              # movments    

    global offset, run, score  # using the veriables from outside this update function

    if run:     # run is set to true
        offset += time.dt * 0.1     # speed of backGround
        setattr(backGround, "texture_offset", (offset, 0)) # to move the backGround to the left

        player.y += held_keys['w'] * 5 * time.dt    # moving and rotating the player using w and s keys
        player.y -= held_keys['s'] * 5 * time.dt
        player.x += held_keys['d'] * 2 * time.dt
        player.x -= held_keys['a'] * 5 * time.dt

        rotate_up = held_keys['w'] * -10
        rotate_down = held_keys['s'] * 10

        if rotate_up != 0:
            player.rotation_z = rotate_up
        else:
            player.rotation_z = rotate_down  

        for monster in monsters:         # to move all monsters to the left
            monster.x -= 5 * time.dt 

            kill = monster.intersects()  # to detect any intersectoin with monesters

            if kill.hit:                 # when the kill is tregered remove a monster from the list and the sky box 
                monsters.remove(monster)
                invoke(destroy, monster, delay = 0.1)  
                score += 1
                text = 'score: ' + str(score)
                info.text = text
                
            dead = player.intersects()   # to detect any intersectoin with player

            if dead.hit and kill.hit:                 # game over
                quit()

def input(key):             # using space bar for firing the bullets
    if run:
        if key == 'space':
            e = Entity(         # creating a bullet based on the player position
                y = player.y,
                x = player.x + 2.5,
                model ='cube',
                texture = 'bullet',
                collider = 'cube',
            )     

            e.animate_x(
                30,             # speed of bullet         
                duration = 2,   # acceleration of bullet. lower faster
                curve = curve.linear  # for linear motion of the bullet.
            )

            invoke(destroy, e, delay = 1)   # delay time to destroy the bullets

app = Ursina()

run = True      # run boolean veriable, to only run the game when true using the update function

window.borderless = False               # Show a border
window.exit_button.visible = False      # Do not show the in-game red X that loses the window
window.fps_counter.enabled = True       # Show the FPS (Frames per second) counter


player = Animation(     # player icon
    'plane',
    collider = 'box',
    y = 0 ,             # start on the left position
    x = -15         
)

Sky()                   # sky box
camera.orthographic = True
camera.fov = 20

offset = 0      # backGround offset veriable

backGround = Entity(                 # background
    model = 'quad',
    texture = 'Cartoon-Sky-Game',
    scale = (38.5, 20),         # size of the backGround (x,y)
    z = 1
)

monster = Entity(      # a monster positioned outside the sky box to the right side
    model = 'cube',
    texture = 'cthulhu',
    collider = 'box',
    scale = 2,
    x = 20,
    y = -10
)

monsters = []           # list of monsters

def newMonster():       # generating new mosters
    new = duplicate(
        monster,
        y = -5 + (54321 * time.dt) % 10     # to get a random postion for the new monster
    )
    monsters.append(new)                 # add to the monsters array
    invoke(newMonster, delay = 1)

newMonster()           

score = 0   # score veriable
Text.size = 0.05    
Text.default_resolution = 1080 * Text.size
info = Text('score: ' + str(score) + '    ')        # desplayed text 
info.x = -0.88      # position of text
info.y = 0.47
info.background = True  
info.visible = True        # Do not show this text

app.run() # starting the game